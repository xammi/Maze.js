#!/usr/bin/env node
var debug = require('debug')('Sphere');
var app = require('../app');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

//--------------------------------------------------------------------------------------------

var io = require('socket.io').listen(server);

var sessions = {};

io.sockets.on('connection', function (socket) {

    socket.on('init', function (opts) {
        if (opts.platform == 'desktop') {
            sessions[opts.code] = socket;
        }
        else if (opts.platform == 'mobile') {
            var gameSocket = sessions[opts.code];

            if (typeof gameSocket != 'undefined') {
                delete sessions[opts.code];
                sessions[socket.id] = gameSocket;

                gameSocket.emit('start');
                socket.emit('start');
            }
            else {
                socket.emit('client-error', {msg: 'Wrong code'});
            }
        }
    });

    socket.on('control', function (data) {
        var gameSocket = sessions[socket.id];
        if (typeof gameSocket != 'undefined') {
            gameSocket.emit('control', data);
        }
    });

    socket.on('disconnect', function () {
        for (var session in sessions)
            if (sessions.hasOwnProperty(session)) {
                var gameSocket = sessions[session];

                if (socket.id === session) {
                    if (typeof gameSocket != 'undefined') {
                        gameSocket.disconnect();
                    }
                    delete sessions[session];
                    return;
                }
                if (socket.id === gameSocket.id) {
                    var clientSocket = io.sockets.connected[session];
                    if (typeof clientSocket != 'undefined') {
                        clientSocket.disconnect();
                    }
                    delete sessions[session];
                    return;
                }
            }
    });
});